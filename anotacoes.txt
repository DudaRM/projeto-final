Primeiro passo: Construir a estrutura do website criando todas as pastas ao lado
Quando a estrutura é construída assim, ao importar em um dos arquivos você tem um pacote que será rodado toda vez.

Segundo passo: iniciar a aplicação (olhar init e main)

Terceiro passo: Criar as rotas
(SEMPRE RODAR PELA MAIN)

Quarto passo: Começar a criar o template. Usaremos jinga que permite misturar HTML e Python
Sobre o block title:
The include tag should be considered as an implementation of “render this subtemplate and include the HTML”, not as “parse this subtemplate and include its contents as if it were part of the parent”. This means that there is no shared state between included templates – each include is a completely independent rendering process.

Blocks are evaluated before they are included. This means that a template that includes blocks from another will contain blocks that have already been evaluated and rendered - not blocks that can be overridden by, for example, an extending template.

Pasta inside: Coisas que não vão mudar, como o CSS, imagens e etc
{{}} pra escrever coisa em HTML

base.html o que iremos usar (bootstrap e afins)

HTTP 
post - enviamos toda a informação para o server

{% with messages = get_flashed_messages(with_categories=true)%}
        {% endwith %}

        pega todas as mensagens do Flash

        &times; fancy X

        db.Model ->> objeto

        para relacionar user e note precisa de uma chave estrangeira
        

        function deleteNote(noteId){
    fetch('/delete-note', {
        method: 'POST',
        body: JSON.stringify({noteId:noteId})
    
    }).then((_res) => {
        window.location.href = "/"; reload de window
    })
}
